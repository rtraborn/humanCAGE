loadWF2      <- 1


# Start the fun ...:
#
library("TSRchitect")


if (loadWF2) {
  load("HsCAGE_2stepwf1.RData")
} else {
  source("HsCAGE_2stepwf1.Rscript")
}
cat (HsCAGE@title,"\tWorkflow 3\n")


#We'll use the TSSthreshold derived in workflow HsCAGEwf2.Rscript and clustDist=40 from here on.
#To choose different values, change the following two lines appropriately.
#
 TSSthreshold <- 1
 useClustDist <- 25

# ... finding TSRs:
HsCAGE <- determineTSR(experimentName=HsCAGE, n.cores=1, tssSetType="replicates", tssSet="all", tagCountThreshold=TSSthreshold, clustDist=useClustDist, writeTable=TRUE, mixedorder=TRUE)

#Save image to troubleshoot
save.image(file="HsCAGE_2stepf3_premerge.RData")

#merge TSR for replicates
HsCAGE <- mergeSampleData(experimentName=HsCAGE, n.cores=1, tagCountThreshold=1)

#find TSR for merged sample
HsCAGE <- determineTSR(experimentName=HsCAGE, n.cores=1, tssSetType="merged", tssSet="1", tagCountThreshold=TSSthreshold, clustDist=useClustDist, writeTable=TRUE, mixedorder=TRUE)

#Save image to troubleshoot
save.image(file="HsCAGE_2stepf3_merged.RData")

# ... now adding annotation to the TSR data set:

HsCAGE <- addAnnotationToTSR(experimentName=HsCAGE, tsrSetType="merged", tsrSet=1, upstreamDist=pupstream, downstreamDist=pdownstream, feature="gene", featureColumn="ID", writeTable=TRUE)

# writing the TSRset and the TSSset to files in BED format
writeTSS(HsCAGE, tssSetType="merged", tssSet=1, fileType="bed", mixedorder=TRUE, tssLabel="HsCAGE_TSS_")
writeTSR(HsCAGE, tsrSetType="merged", tsrSet=1, fileType="bed", mixedorder=TRUE, tsrLabel="HsCAGE_TSR_")

# ... save the data generated by the above for future reloading with the R load command:
save.image(file="HsCAGE_2stepwf3.RData")
save(HsCAGE, file="HsCAGE_complete.RData")
